#!/usr/bin/env spython
import os
from os.path import walk, splitext, exists, basename, dirname
import sys

import output
from output import *
import portage
import xpak
import string
from string import strip, find, replace, split
import commands
import shutil
import re
import time

#number of ebuilds merged
merged=0
opts=["--all",
	"--autoclean",
	"--buildpkg",
	"--clean",
	"--debug",
	"--fetchonly",
	"--help",
	"--noreplace",
	"--onlydeps",
	"--pretend",
	"--search",
	"--unmerge",
	"--usepkg",
	"--verbose",
	"--world"]
shortopts={"a":"--all",
	"b":"--buildpkg",
	"c":"--clean",
	"d":"--debug",
	"f":"--fetchonly",
	"h":"--help",
	"k":"--usepkg",
	"n":"--noreplace",
	"o":"--onlydeps",
	"p":"--pretend",
	"s":"--search",
	"u":"--unmerge",
	"v":"--verbose",
	"w":"--world"}
modes=["rsync","system","update","config"]
myopts=[]
mymode=[]
myfiles=[]
edebug=0
for x in sys.argv[1:]:
	if len(x)>=2:
		if x[0:1]=="-":
			if x[1:2]=="-":
				if x in opts:
					myopts.append(x)
				else:
					print "!!! Error:",x,"is an invalid option."
					sys.exit(1)
			else:
				for y in x[1:]:
					if shortopts.has_key(y):
						myopts.append(shortopts[y])
					else:
						print y
						print "!!! Error: -"+y+" is an invalid short option."
		elif x in modes:
			if len(mymode)>=1:
				print "!!! Error: more than one mode specified on command-line."
				print "!!! Available modes:",modes
				sys.exit(1)
			else:
				mymode.append(x)
		else:	
				#this little conditional helps tab completion
				if x[-1]=="/":
					myfiles.append(x[:-1])
				else:
					myfiles.append(x)

if os.getuid()!=0 and "--help" not in myopts and "--search" not in myopts:
	print "!!! to be able to perform the requested action emerge must be run by root."
	sys.exit(1)

# search functionality
class search:
	
	#
	# class constants
	#
	VERSION_SHORT=1
	VERSION_RELEASE=2
	
	#
	# public interface
	#
	def __init__(self,searchkey=""):
		"""Searches the available and installed packages for the supplied search key.
		The list of available and installed packages is created at object instantiation.
		This makes successive searches faster."""
		self.searchkey = searchkey
		self.treecache = portage.portagetree()
		self.installcache = portage.vartree()
		self.re_portagedir = re.compile('/usr/portage/')
		self.re_description = re.compile('DESCRIPTION="')
		self.re_quote = re.compile('"')
		self.re_slash = re.compile('/')
		self.initResults()
		
	def setKey(self,searchkey):
		"""changes the search key"""
		self.searchkey = searchkey
		self.initResults()
	
	def execute(self):
		"""Performs the saerch for the supplied search key"""
		if self.searchkey:
			self.initResults()
			walk("/usr/portage", self.searchVisit, 0)

	def output(self):
		"""Outputs the results of the search."""
		print "[ Results for search key : "+white(self.searchkey)+" ]"
		print "[ Applications found : "+white(str(len(self.packagematches)))+" ]"
		print " "
		for match in self.packagematches:
			full_package = strip(self.treecache.dep_bestmatch(match))
			if len(full_package) > 1:
				print green("*")+"  "+white(match)
				print "     ", "Latest version Available: ", self.getVersion(full_package, search.VERSION_RELEASE)
				print "     ", self.getInstallationStatus(match)
				print "     ", "Description: ", self.getDescription(self.getFullPath(match, full_package),self.getVersion(full_package, search.VERSION_SHORT))
				print " "
			else:
				print green("*")+"  "+white(match)+" "+red("[ Masked ]")
				print " "
		
	#
	# private interface
	#
	def initResults(self):
		self.packagematches = []
	
	def searchVisit(self,arg,dirname,names):
		p = self.re_portagedir.split(dirname)
		if len(p) > 1: ## Don't process /usr/portage itself ##
			p = p[1].split('/')
			if len(p) < 3: ## Remove 'Files' dirs, not needed for the prog ##
				if len(p) > 1: ## Filter out main dirs, like x11-libs and such ##
					if p[1] != 'CVS' and p[0] != 'profiles' and p[0] != 'packages' and p[0] != 'incoming' and p[0] != 'distfiles': ## For the Dev's among us :o) ##
						if self.searchkey != "*":
							if re.search(self.searchkey.lower(), p[1].lower()): ## Files that are searched for ##
								self.packagematches.append(strip(p[0] + "/" + p[1]))
						else:
							self.packagematches.append(strip(p[0] + "/" + p[1]))
	
	def getInstallationStatus(self,package):
		installed_package = self.installcache.dep_bestmatch(package)
		result = ""
		version = self.getVersion(installed_package,search.VERSION_RELEASE)
		if len(version) > 1:
			result = "Latest version Installed:  " + version
		else:
			result = "Latest version Installed:  [ Not Installed ]"
		return result

	def getDescription(self,ebuildPath,packageVersion): ## Gets description from latest ebuild ##
		file = open(ebuildPath)
		result = "";
		while 1:
			data = file.readline()
			if data:
				if self.re_description.match(data.upper()):
					p = self.re_description.split(data)
					p = self.re_quote.split(p[1])
					result = replace(p[0], "${PV}", packageVersion)
					result = replace(result, "${pv}", packageVersion)
					result = replace(result, "${description}", "KDE "  + packageVersion + " ")
			else:
				break;
		file.close()
		return result

	def getFullPath(self,packageShortName,packageFullName):  ## Returns the full path of the ebuild ##
		absolute_path = '/usr/portage/' + strip(packageShortName)
		package_parts = self.re_slash.split(packageFullName)
		result = absolute_path + "/" + package_parts[1] + ".ebuild"
		return result

	def getVersion(self,full_package,detail):
		if len(full_package) > 1:
			package_parts = portage.catpkgsplit(full_package)
			if detail == search.VERSION_RELEASE and package_parts[3] != 'r0':
				result = package_parts[2]+ "-" + package_parts[3]
			else:
				result = package_parts[2]
		else:
			result = ""
		return result

#build our package digraph
class depgraph:

	def __init__(self,mymode,myopts):
		self.mymode=mymode
		self.myopts=myopts
		virts=portage.getvirtuals("/")
		self.db={}
		self.db["/"]={"virtuals":virts,"vartree":portage.vartree("/",virts),"porttree":portage.portagetree("/",virts),"bintree":portage.binarytree("/",virts)}
		if portage.root!="/":
			pr=portage.root
			virts=portage.getvirtuals(pr)
			self.db[pr]={"virtuals":virts,"vartree":portage.vartree(pr,virts),"porttree":portage.portagetree(pr,virts),"bintree":portage.binarytree(pr,virts)}
		self.digraph=portage.digraph()
		self.orderedkeys=[]
		#the following is so we have an empty vartree (used in emerge update calculations)
		self.emptytree=portage.vartree("/",virts,self.db["/"]["vartree"])
		self.emptytree.tree={}
	def create(self,mybigkey,myparent=None,addme=1):
		"""creates the actual digraph of packges to merge.  return 1 on success, 0 on failure
		mybigkey = specification of package to merge; myparent = parent package (one depending on me);
		addme = should I be added to the tree? (for the --onlydeps mode)"""
		if mybigkey==None:
			return
		sys.stdout.write(".")	
		sys.stdout.flush()
		if self.digraph.hasnode(mybigkey):
			#if we've already hit this node before, we're already recursing on the dependencies.
			#no need to recurse again.
			if addme:
				if myparent:
					self.digraph.addnode(mybigkey,myparent)
			return 1
		mytype,myroot,mykey=string.split(mybigkey)
		if "--noreplace" in self.myopts:
			if self.db[myroot]["vartree"].exists_specific(mykey):
				print "\n>>>",mykey,"already merged in",myroot+", skipping...\n"
				return 1
		if mytype=="binary":
			if not self.db[portage.root]["bintree"].exists_specific(mykey):
				print "\n\n!!!",mytype,mykey,"not found (possibly blocked by package.mask)\n"
				sys.exit(1)
			mytbz2=xpak.tbz2(self.db[portage.root]["bintree"].getname(mykey))
			edepend=["",string.join(mytbz2.getelements("RDEPEND")," ")]
		else:
			if not self.db[myroot]["porttree"].exists_specific(mykey):
				print "\n\n!!!",mytype,mykey,"not found (possibly blocked by package.mask)\n"
				sys.exit(1)
				mydep={}
			myebuild=self.db[myroot]["porttree"].getname(mykey)
			edepend=portage.doebuild(myebuild,"depend",myroot,1,edebug)
			if edepend==1:
				print "!!! emerge aborting."
				sys.exit(1)
		mydep={}	
		if myroot=="/":
			mydep["/"]=edepend[0]+" "+edepend[1]
		else:
			mydep["/"],mydep[myroot]=edepend
		if addme:
			self.digraph.addnode(mybigkey,myparent)
		for dep in mydep.keys():
			if "update" in mymode:
				mycheck=self.emptytree.depcheck(mydep[dep])
			else:
				mycheck=self.db[dep]["vartree"].depcheck(mydep[dep])
			if mycheck[0]==0:
				print "!!! depgraph.create() error: string format:",mydep
				return 0
			for x in mycheck[1]:
				mynew=self.match(x,dep,mykey)
				if not self.digraph.hasnode(mynew):
					if addme:
						if not self.create(mynew,mybigkey):
							return 0
					else:
						if not self.create(mynew,None):
							return 0
				else:
					self.digraph.addnode(mynew,mybigkey)
		return 1
	
	def altlist(self):
		mygraph=self.digraph.copy()
		dolist=["/"]
		retlist=[]
		for x in self.db.keys():
			self.db[x]["merge"]=[]
			if x not in dolist:
				dolist.append(x)
		while (not mygraph.empty()):
			mycurkey=mygraph.firstzero()
			if not mycurkey:
				print "!!! Error: circular dependencies"
				sys.exit(1)
			splitski=string.split(mycurkey)
			if "update" in mymode:
				if not self.db["/"]["vartree"].exists_specific(splitski[2]):
					self.db["/"]["merge"].append(splitski)
			else:
				self.db[splitski[1]]["merge"].append(splitski)	
			mygraph.delnode(mycurkey)
		for x in dolist:
			for y in self.db[x]["merge"]:
				retlist.append(y)
		return retlist

	def syscreate(self,mylines):
		mynewlines=[]
		for x in mylines:
			myline=string.join(string.split(x))
			if not len(myline):
				continue
			if myline[0]=="#":
				continue
			if myline[0]!="*":
				continue
			myline=myline[1:]
			mynewlines.append(myline)
		if "--world" in self.myopts:
			mynewlines.extend(self.db["/"]["vartree"].getallnodes())
		for myline in mynewlines:	
			if "update" not in self.mymode:
				mycheck=self.db[portage.root]["vartree"].depcheck(myline)
				if mycheck[0]==0:
					print "\n!!! Warning:",myline,"has an invalid depstring\n"
					continue
				if mycheck[1]==None:
					continue
				for x in mycheck[1]:
					self.create(self.match(myline,mykey="syscreate1"))
			else:
				self.create(self.match(myline,mykey="update (likely old /var/db/pkg entry)"))
	
	def match(self,mydep,myroot=portage.root,mykey=None):
		myeb=self.db[portage.root]["porttree"].dep_bestmatch(mydep)
		if not myeb:
			if not mykey:
				print "\n!!! Warning: couldn't find match for",mydep
			else:
				print "\n!!! Warning: couldn't find match for",mydep,"in",mykey
			return None
		if "--usepkg" in self.myopts:
			mypk=self.db[portage.root]["bintree"].dep_bestmatch(mydep)
			if myeb==mypk:
				myk="binary "+portage.root+" "+mypk
			else:
				myk="ebuild "+myroot+" "+myeb
		else:
			myk="ebuild "+myroot+" "+myeb
		return myk	
	
	def display(self,mylist):
		for x in mylist:
			if self.db[x[1]]["vartree"].exists_specific(x[2]):
				addl=" "+yellow("R")+" "
			elif self.db[x[1]]["vartree"].exists_specific_cat(x[2]):
				addl="  "+turquoise("U")
			else:
				addl=""+green("N")+"  "
			print "["+x[0]+" "+addl+"]",x[2],"to",x[1]
				
	def merge(self,mylist):
		returnme=0
		#above line used by --fetchonly
		for x in mylist:
			myroot=x[1]
			print ">>> emerge",x[2],"to",x[1]
			#the last argument in the portage.doebuild() tells doebuild to *not* do dep checking
			#(emerge is already handling that)
			y=self.db[myroot]["porttree"].getname(x[2])
			if x[0]=="ebuild":
				if "--fetchonly" in self.myopts:
					retval=portage.doebuild(y,"fetch",myroot,0,edebug)
					if retval:
						print
						print "!!! Fetch for",y,"failed, continuing..."
						print	
						returnme=1
				elif "--buildpkg" in self.myopts:
					#create pkg, then merge pkg
					retval=portage.doebuild(y,"clean",myroot,0,edebug)
					if retval:
						print "!!! emerge aborting on ",y,"."
						sys.exit(1)
					retval=portage.doebuild(y,"package",myroot,0,edebug)
					if retval:
						print "!!! emerge aborting on ",y,"."
						sys.exit(1)
					#dynamically update our database	
					self.db[portage.root]["bintree"].inject(x[2])
					mytbz2=self.db[portage.root]["bintree"].getname(x[2])
					retval=portage.pkgmerge(mytbz2,myroot)
					if retval==None:
						print "!!! emerge aborting on ",y,"."
						sys.exit(1)
				else:
					retval=portage.doebuild(y,"clean",myroot,0,edebug)
					if retval:
						print "!!! emerge aborting on ",y,"."
						sys.exit(1)
					retval=portage.doebuild(y,"merge",myroot,0,edebug)
					if retval:
						print "!!! emerge aborting on ",y,"."
						sys.exit(1)
					#dynamically update our database	
			else:
				#merge the tbz2
				mytbz2=self.db[portage.root]["bintree"].getname(x[2])
				retval=portage.pkgmerge(mytbz2,x[1])
				if retval==None:
					print "!!! emerge aborting on ",y,"."
					sys.exit(1)
				#need to check for errors
			self.db[x[1]]["vartree"].inject(x[2])
			if "--autoclean" in self.myopts:
				retval=portage.doebuild(y,"clean",myroot,0,edebug)
				if retval:
					print "!!! emerge aborting on ",y,"."
					sys.exit(1)
		#my doing an exit this way, --fetchonly can continue to try to
		#fetch everything even if a particular download fails.
		if "--fetchonly" in self.myopts:
			if returnme:
				print "\n\n!!! Some fetch errors were encountered.  Please see above for details.\n\n"
				sys.exit(returnme)
			else:
				sys.exit(0)

def post_emerge(retval=0):
	auxpat=re.compile('^([^-]*)(-\d+)?\.info(-\d+)?(\.gz)?')	
	global myopts
	print
	if "--pretend" in myopts:
		sys.exit(retval)
	root=portage.root
	if not os.path.isdir(root+"usr/share/info"):
		print "    "+root+"usr/share/info doesn't exist, skipping info regeneration."
	elif not os.path.exists("/usr/bin/install-info"):
		print "    /usr/bin/install-info doesn't exist; skipping info regeneration."
	else:
		print " "+green("*")+" Regenerating GNU info directory index..."
		if os.path.exists(root+"usr/share/info/dir"):
			os.rename(root+"usr/share/info/dir",root+"usr/share/info/dir.old")
		icount=0
		badcount=0
		for x in os.listdir(root+"usr/share/info"):
			aux=auxpat.search(x)
			if not aux:
				continue
			auxgroups=aux.groups()	
			if not (auxgroups[1] or auxgroups[2]):
				myso=commands.getstatusoutput("/usr/bin/install-info --dir-file="+root+"usr/share/info/dir "+root+"usr/share/info/"+x)[1]
				if myso!="":
					print auxgroups	
					badcount=badcount+1
					if "--verbose" in myopts:
						print myso
				icount=icount+1
		if badcount:
			if "--verbose" not in myopts:
				print " "+yellow("*")+" Processed",icount,"info files:",badcount,"errors; type "+green("emerge --verbose")+" to view errors."
			else:
				print " "+yellow("*")+" Processed",icount,"info files;",badcount,"errors."

		else:
			print " "+green("*")+" Processed",icount,"info files."
	if portage.settings["CONFIG_PROTECT"]:
		#number of directories with some protect files in them
		procount=0
		for x in string.split(portage.settings["CONFIG_PROTECT"]):
			if os.path.isdir(x):
				a=commands.getstatusoutput("cd "+x+"; find -iname '._cfg????_*'")
				if a[0]!=0:
					print " "+red("*")+" error scanning",x
				else:
					files=string.split(a[1])
					if files:
						procount=procount+1
						print " "+yellow("* IMPORTANT:")+"",len(files),"config files in",x,"need updating."
		if procount:
			print " "+yellow("*")+" Type "+green("emerge --help config")+" to learn how to update config files."
		print
	sys.exit(retval)

if not portage.settings.has_key("MAINTAINER_noclean"):
	if not "--autoclean" in myopts:
		myopts.append("--autoclean")
if "--debug" in myopts:
	edebug=1
if "--help" in myopts:
	if len(mymode)==0:
		print
		print bold("You can also type \"emerge --help system\", \"emerge --help rsync\" and")
		print bold("\"emerge --help config\" for additional help.")
		print
		print turquoise("Usage: ")+turquoise("emerge")+" [ "+green("options")+" ] [ "+turquoise("ebuildfile")+" | "+turquoise("tbz2file")+" ] | "+turquoise("dep")+" ]..."
		print "       "+turquoise("emerge")+" [ "+green("options")+" ] "+turquoise("system")
		print "       "+turquoise("emerge")+" [ "+green("--clean")+" "+green("-c")+" ] "+turquoise("rsync")
		print
		print turquoise("Options:")
		print "       "+green("--help")+" "+green("-h")+" [ mode ]"
		print "              display this help (specify optional \"rsync\" or \"system\" for"
		print "              more info)"
		print 
		print "       "+green("--verbose")+" "+green("-v")
		print "              Tell emerge to run in verbose mode.  Currently, this causes"
		print "              emerge to print out GNU info errors, if any."
		print 
		print "       "+green("--debug")+" "+green("-d")
		print "              Tell emerge to run the "+turquoise("ebuild")+" command in --debug"
		print "              mode.  In this mode, the bash build environment will run with"
		print "              the -x option, causing it to output verbose debug information"
		print "              to stdout.  --debug is great for finding bash syntax errors."
		print
		print "       "+green("--fetchonly")+" "+green("-f")
		print "              Instead of doing any package building, just perform fetches for"
		print "              all packages (main package as well as all dependencies.)"
		print
		print "       "+green("--onlydeps")+" "+green("-o")
		print "              Only merge (or pretend to merge) the dependencies of the"
		print "              specified packages, not the packages themselves."
		print
		print "       "+green("--noreplace")+" "+green("-n")
		print "              Skip the packages specified on the command-line that have"
		print "              already been installed.  Without this option, any packages,"
		print "              ebuilds, or deps you specify on on the command-line *will* cause"
		print "              Portage to remerge the package, even if it is already installed."
		print "              Note that Portage will never remerge dependencies automatically."
		print
		print "       "+green("--usepkg")+" "+green("-k")
		print "              tell emerge to use binary packages (from $DISTDIR) if they are"
		print "              available, thus possibly avoiding some time-consuming compiles."
		print "              This option is useful for CD installs; you can export"
		print "              DISTDIR=/mnt/cdrom/packages and then use this option to have"
		print "              emerge \"pull\" binary packages from the CD in order to satisfy" 
		print "              dependencies."
		print
		print "       "+green("--buildpkg")+" "+green("-b")
		print "              tell emerge to build binary packages for all ebuilds processed"
		print "              (in addition to actually merging the packages.  Useful for"
		print "              maintainers or if you administrate multiple Gentoo Linux"
		print "              systems (build once, emerge tbz2s everywhere)."
		print
		print "       "+green("--autoclean")
		print "              emerge normally cleans out the package-specific temporary"
		print "              build directory before it starts the building a package.  With"
		print "              --autoclean, it will also clean the directory *after* the"
		print "              build completes.  This option is automatically enabled for"
		print "              normal users, but maintainers can use this option to enable"
		print "              autocleaning."
		print
		print "       "+green("--pretend")+" "+green("-p")
		print "              instead of actually performing the merge, simply display what"
		print "              ebuilds and tbz2s *would* have been installed if --pretend"
		print "              weren't used.  Using --pretend is strongly recommended before"
		print "              installing an unfamiliar package.  In the printout, N = new,"
		print "              U = upgrading, R = replacing"
		print
		print "       "+green("--unmerge")+" "+green("-u")
		print "              removes an installed package. the arguments can be in two"
		print "              different formats : /var/db/pkg/category/package-version"
		print "              or category/package-version."
		print "              A few examples of the second format:"
		print "              "+bold("binutils")+" matches"
		print "                  binutils-2.11.90.0.7 and binutils-2.11.92.0.12.3-r1"
		print "              "+white(">binutils-2.11.90.0.7")+" matches"
		print "                  binutils-2.11.92.0.12.3-r1"
		print "              "+white("sys-devel/binutils")+" matches"
		print "                  binutils-2.11.90.0.7 and binutils-2.11.92.0.12.3-r1"
		print "              "+white("sys-devel/binutils-2.11.90.0.7")+" matches"
		print "                  binutils-2.11.90.0.7"
		print "              "+white(">sys-devel/binutils-2.11.90.0.7")+" matches"
		print "                  binutils-2.11.92.0.12.3-r1"
		print "              "+white(">=sys-devel/binutils-2.11.90.0.7")+" matches"
		print "                  binutils-2.11.90.0.7 and binutils-2.11.92.0.12.3-r1"
		print "              "+white("<sys-devel/binutils-2.11.92.0.12.3-r1")+" matches"
		print "                  binutils-2.11.90.0.7"
		print "              "+white("<=sys-devel/binutils-2.11.92.0.12.3-r1")+" matches"
		print "                  binutils-2.11.90.0.7 and binutils-2.11.92.0.12.3-r1"
		print
		print "       "+green("--all")+" "+green("-a")
		print "              complements the --unmerge option to make sure that all"
		print "              installed versions of an application will be unmerged, the"
		print "              default behaviour is to not remove the last installed version."
		print
		print "       "+green("--search")+" "+green("-s")
		print "              searches for matches of the supplied string in the current local"
		print "              portage tree. The search string is a regular expression."
		print "              A few examples: "
		print "              "+white("emerge --search \"^kde\"")
		print "                  list all packages starting with kde"
		print "              "+white("emerge --search \"gcc$\"")
		print "                  list all packages ending with gcc"
		print "              "+white("emerge --search \"\"")+" or"
		print "              "+white("emerge --search \"*\"")
		print "                  list all available packages "
		print
	elif "rsync" in mymode:
		print
		print "       "+turquoise("emerge")+" [ "+green("--clean")+" "+green("-c")+" ] "+turquoise("rsync")
		print
		print "       \"emerge rsync\" initiates an rsync update with cvs.gentoo.org,"
		print "       updating your Portage tree (typically in /usr/portage).  This option"
		print "       will erase any changes that you have made to existing Portage files"
		print "       so be careful.  \"emerge --clean rsync\" does the same thing as \"emerge"
		print "       rsync\", but files that no longer exist on our server are removed."
		print
	elif "system" in mymode:
		print
		print "       "+turquoise("emerge")+" [ "+green("options")+" ] "+turquoise("system")
		print
		print "       \"emerge system\" is the Portage system update command.  When run, it"
		print "       will scan the etc/make.profile/packages file and determine what"
		print "       packages need to be installed so that your system meets the minimum"
		print "       requirements of your current system profile.  Note that this doesn't"
		print "       necessarily bring your system up-to-date at all; instead, it just"
		print "       ensures that you have no missing parts.  For example, if your system"
		print "       profile specifies that you should have sys-apps/iptables installed"
		print "       and you don't, then \"emerge system\" will install it (the most"
		print "       recent version that matches the profile spec) for you.  It's always a"
		print "       good idea to do an \"emerge --pretend system\" before an \"emerge"
		print "       system\", just so you know what emerge is planning to do."
		print
	elif "config" in mymode:
		outstuff=green("Config file management support (preliminary)")+"""

Portage has a special feature called "config file protection".  The purpose of
this feature is to prevent new package installs from clobbering existig
configuration files.  By default, config file protection is turned on for /etc
and the KDE configuration dirs; more may be added in the future.

When Portage installs a file into a protected directory tree like /etc, any
existing files will not be overwritten.  If a file of the same name already
exists, Portage will change the name of the to-be- installed file from 'foo' to
'._cfg0000_foo'.  If '._cfg0000_foo' already exists, this name becomes
'._cfg0001_foo', etc.  In this way, existing files are not overwritten,
allowing the administrator to manually merge the new config files and avoid any
unexpected changes.

In addition to protecting overwritten files, Portage will not delete any files
from a protected directory when a package is unmerged.  While this may be a
little bit untidy, it does prevent potentially valuable config files from being
deleted, which is of paramount importance.

Protected directories are set using the CONFIG_PROTECT variable, normally
defined in /etc/make.globals.  Directory exceptions to the CONFIG_PROTECTed
directories can be specified using the CONFIG_PROTECT_MASK variable.  To find
files that need to be updated in /etc, type:

# find /etc -iname '._cfg????_*'

You can disable this feature by setting CONFIG_PROTECT="" in /etc/make.conf.
Then, Portage will mercilessly auto-update your config files.  Alternatively,
you can leave Config File Protection on but tell Portage that it can overwrite
files in certain specific /etc subdirectories.  For example, if you wanted
Portage to automatically update your rc scripts and your wget configuration,
but didn't want any other changes made without your explicit approval, you'd
add this to /etc/make.conf:

CONFIG_PROTECT_MASK="/etc/wget /etc/rc.d"

"""
		print outstuff
	sys.exit(1)

if "--search" in myopts:
	if not myfiles:
		print
		print "No search terms provided."
		print
	else:
		searchinstance = search()
		for mysearch in myfiles:
			searchinstance.setKey(mysearch)
			searchinstance.execute()
			searchinstance.output()
	sys.exit(1)

if "--unmerge" in myopts:
	if not myfiles:
		print
		print "No packages to unmerge have been provided."
		print
	else:
		full_paths={}
		var_path=portage.root+"var/db/pkg"
		# process all arguments, verify if they can be resolved to an installed
		# ebuild file and add the absolute paths of these ebuild to a list
		for x in myfiles:

			# collection of full package paths for this particular package
			full_paths_local={}

			# an absolute path has been given
			if (x[0]=='/'):
				path_parts=split(x, '/')
				if len(path_parts) != 6:
					print "When providing an absolute path it should be"
					print "in the following format : "+var_path+"/category/package"
					print "The path '"+x+"' doesn't respect this."
					sys.exit(1)
				elif not os.path.exists(x):
					print "The path '"+x+"' doesn't exist."
					sys.exit(1)
				elif -1 == find(x, var_path):
					print "The path '"+x+"' didn't commence with '"+var_path+"'."
					sys.exit(1)
				else:
					full_path=strip(x)+"/"+path_parts[5]+".ebuild"
					if not os.path.exists(full_path):
						print "The ebuild '"+full_path+"' couldn't be found."
						print "Your portage installation tree seems to be corrupted."
					else:
						full_paths_local[full_path]=1

			# a category and package name have been given
			else:
				localtree=portage.vartree()	
				mymatches=localtree.dep_match(x)
				# if no matches were found, try again by adding a '=' dep symbol if no
				# dep symbols are already present
				if not mymatches and x[0] not in ('<','>','=','~'):
					mymatches=localtree.dep_match("="+x)
				# only loops over the matches if they were found
				if mymatches:
					for package in mymatches:
						package_parts=split(package, '/')
						full_path=var_path+"/"+package+"/"+package_parts[1]+".ebuild"
						if not os.path.exists(full_path):
							print "The ebuild '"+full_path+"' couldn't be found."
							print "Your portage installation tree seems to be corrupted."
						else:
							full_paths_local[full_path]=1

			# check for the --safe switch
			if not "--all" in myopts:
				if len(full_paths_local) > 0:
					latest=["",0]
					# determine the latest installed package
					for full_path in full_paths_local.keys():
						contents_path=dirname(full_path)+"/CONTENTS"
						contents_mtime=os.stat(contents_path)[8]
						if contents_mtime > latest[1]:
							latest=[full_path,contents_mtime]
					if latest[0]:
						del full_paths_local[latest[0]]

			# add all local paths to the global scope
			full_paths.update(full_paths_local)

		if len(full_paths)==0:
			print "Couldn't find any matching installed packages."
		else:
			if "--pretend" in myopts:
				print
				print "The are the packages that I would unmerge :"
				print
			else:
				print
				print "The following packages are going to be unmerged :"
				print
			for full_path in full_paths.keys():
				package_parts=split(full_path, "/")
				print "    "+package_parts[4]+"/"+package_parts[5]
			if "--pretend" in myopts:
				print
			else:
				secs=5
				print
				print "Waiting",secs,"seconds to make sure that you want these"
				print "packages to be removed ..."
				while secs > 0:
					sys.stdout.write(str(secs)+" ")	
					sys.stdout.flush()
					time.sleep(1)
					secs = secs-1
				print secs
				for full_path in full_paths.keys():
					print "Unmerging "+os.path.basename(full_path)+" ..."
					retval=portage.doebuild(full_path,"unmerge",portage.root,0,edebug)

	sys.exit(1)

if "--pretend" in myopts:
		print
		print "These are the packages that I would merge, in order."
		print

if "rsync" in mymode:
	if not os.path.exists("/usr/bin/rsync"):
		print "!!! /usr/bin/rsync does not exist, so rsync support is disabled."
		sys.exit(1)
	rclean=0
	myportdir=portage.settings["PORTDIR"]
	if myportdir[-1]=="/":
		myportdir=myportdir[:-1]
	if not os.path.exists(myportdir):
		print ">>>",myportdir,"not found, creating it."
		os.makedirs(myportdir,0755)	
	if "--clean" in myopts:
			#we'll --delete files when we rsync
			rclean=1
	mycommand="/usr/bin/rsync -rlptDv --stats --progress "
	if rclean:
		mycommand=mycommand+"--delete --exclude='distfiles/*' --exclude='packages/*' "
	mycommand=mycommand+"rsync://cvs.gentoo.org/gentoo-x86-portage/* "+myportdir
	print ">>> starting rsync with cvs.gentoo.org..."
	#protect users that did not set a default umask
	os.umask(022)
	sys.exit(os.system(mycommand))	

if ("system" in mymode) or ("update" in mymode):
	#system profile mode
	if os.path.exists(portage.profiledir+"/packages"):
		pfile=portage.profiledir+"/packages"
	else:
		print "!!! Couldn't find",portage.profiledir+"/packages;"
		print "\"system\" mode unavailable."
		sys.exit(1)
	myfile=open(pfile,"r")
	mylines=myfile.readlines()
	myfile.close()
	mydepgraph=depgraph(mymode,myopts)
	print "Calculating system dependencies",
	mydepgraph.syscreate(mylines)
	print " done!"
	if "--pretend" in myopts:
		mydepgraph.display(mydepgraph.altlist())
	else:
		mydepgraph.merge(mydepgraph.altlist())
	post_emerge()

mydepgraph=depgraph(mymode,myopts)
if not myfiles:
	post_emerge()
	#we don't have any files to process; skip this step and exit
print "Calculating dependencies",
for mypkg in myfiles:
	if mypkg[-5:]==".tbz2":
		mytype="binary"
		mytbz2=xpak.tbz2(mypkg)
		mykey=mytbz2.getelements("CATEGORY")[0]+"/"+os.path.basename(mypkg)[:-5]
	elif mypkg[-7:]==".ebuild":
		mytype="ebuild"
		mykey=os.path.basename(os.path.abspath(mypkg+"/../.."))+"/"+os.path.basename(mypkg)[:-7]
	else:
		mykey=""
		if "--usepkg" in myopts:
			mykey=mydepgraph.db[portage.root]["bintree"].dep_bestmatch(mypkg)
			mytype="binary"
		if not mykey:
			mykey=mydepgraph.db[portage.root]["porttree"].dep_bestmatch(mypkg)
			mytype="ebuild"
			if not mykey:
				print "!!! Couldn't find match for",mypkg+"; aborting."
				sys.exit(1)
#	else:
#		print "!!! Error:",x,"is neither an ebuild nor a .tbz2 package."
#		sys.exit(1)
	mydepgraph.create(mytype+" "+portage.root+" "+mykey,None,"--onlydeps" not in myopts)
print " done!"
if "--pretend" in myopts:
	mydepgraph.display(mydepgraph.altlist())
else:
	mydepgraph.merge(mydepgraph.altlist())
post_emerge()
