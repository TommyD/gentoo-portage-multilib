.TH "EBUILD" "5" "October 24, 2002" "portage 2.0.42" "portage"
.SH "NAME"
ebuild \- the internal format, variables, and functions in an ebuild script
.SH "DESCRIPTION"
The
.BR ebuild (1)
program accepts a single ebuild script as an argument.  This script contains variables and commands that specify how to download, unpack, patch, compile, install and merge a particular software package from its original sources.  In addition to all of this, the ebuild script can also contain pre/post install/remove commands, as required.
.SH "EXAMPLES"
Here's a simple example ebuild:

.DS
# Copyright 1999\-2002 Gentoo Technologies, Inc.
.br 
# Distributed under the terms of the GNU General Public License v2
.br
#\ $Header$
.br 

S=${WORKDIR}/${P}
.br 
DESCRIPTION="Super\-useful stream editor"
.br 
SRC_URI="ftp://alpha.gnu.org/pub/gnu/sed/${P}.tar.gz"
.br 
HOMEPAGE="http://www.gnu.org/software/sed/sed.html"
.br 
KEYWORDS="x86 ppc sparc sparc64 alpha"
.br 
SLOT="0"
.br 
LICENSE="GPL\-2"
.br 
IUSE=""
.br 

DEPEND="virtual/glibc"
.br 
RDEPEND="virtual/glibc"
.br 

src_compile() {
.br
	econf
.br
	emake || die "emake failed"
.br 
}

src_install() {
.br
	into /usr
.br
	doinfo doc/sed.info
.br
	doman doc/sed.1
.br
	into /
.br
	dobin sed/sed
.br
	dodir /usr/bin
.br
	dosym /bin/sed /usr/bin/sed
.br
	dodoc COPYING NEWS README* THANKS TODO AUTHORS BUGS ANNOUNCE
.br 
}
.SH "VARIABLES"
.TP
\fBP\fR
This variable contains the package name without the ebuild revision. This variable should NEVER be modified.
.br
.BR 'xfree\-4.2.1\-r2.ebuild'\ $P=='xfree\-4.2.1'
.TP
\fBPN\fR
Contains the name of the script without the version number.
.br
.BR 'xfree\-4.2.1\-r2.ebuild'\ $PN=='xfree'
.TP
\fBPV\fR
Contains the version number without the revision.
.br
.BR 'xfree\-4.2.1\-r2.ebuild'\ $PV=='4.2.1'
.TP
\fBPR\fR
Contains the revision number or 'r0' if no revision number exists.
.br
.BR 'xfree\-4.2.1\-r2.ebuild'\ $PV=='r2'
.TP
\fBPF\fR
Contains the full package name \fI[PN]\-[PV]_r[PR]\fR
.br
.BR 'xfree\-4.2.1\-r2.ebuild'\ $P=='xfree\-4.2.1\-r2'
.TP
\fBA\fR
Contains all source files required for the package.  This variable must no
longer be defined because it is autogenerated from the \fISRC_URI\fR
variables.
.TP
\fBWORKDIR\fR = \fI"$PORTAGE_TMPDIR/portage/${CATEGORY}/${PF}/work"\fR
Contains the path to the package build root.  Do not modify this variable.
.TP
\fBS\fR = \fI"${WORKDIR}/${P}"\fR
Contains the path to the temporary \fIbuild directory\fR.  This variable is used by the
functions \fIsrc_compile\fR and \fIsrc_install\fR.  Both are executed
with \fIS\fR as the current directory.  This variable may be modified to match the
extraction directory of a tarball for the package.
.TP
\fBD\fR = \fI"$PORTAGE_TMPDIR/portage/${CATEGORY}/${PF}/image"\fR
Contains the path to the temporary \fIinstall directory\fR.  Every write operation that
does not involve the helper tools and functions (found below) should be prefixed with
${D}.  Do not modify this variable.
.TP
\fBDESCRIPTION\fR = \fI"A happy little package"\fR
Should contain a short description of the package.
.TP
\fBSRC_URI\fR
Contains a list of URI's for the required source files.  It can contain
multiple URI's for a single source file.  The fastest location is chosen
if the file was not found at \fIGENTOO_MIRROR\fB\fR.
.TP
\fBHOMEPAGE\fR
Should contain a list of URL's for the sources main sites and other further
package dependent information.
.TP
\fBKEYWORDS\fR = \fI[-~][x86,ppc,sparc,sparc64,alpha]\fR
Should contain appropriate list of arches that the ebuild is know to work/not work.  By
default if you do not know if an ebuild runs under a particular arch simply omit that
KEYWORD.  If the ebuild will not work on that arch include it as \-ppc for example.  If
the ebuild is being submitted for inclusion, it must have ~arch set for architectures
where it has been PROVEN TO WORK.  (Packages KEYWORDed this way may be unmasked for
testing by setting ACCEPT_KEYWORDS="~arch" on the command line, or in \fBmake.conf\fR(5))
.TP
\fBSLOT\fR
This sets the SLOT for packages that may need to co\-exist.  By default
you should set SLOT="0" unless you know what you are doing and need to do otherwise.
.TP
\fBLICENSE\fR
This should be a space delimited list of licenses that the package falls
under.  This \fB_must_\fR be set to a matching license in /usr/portage/licenses/.  
If the license does not exist in portage yet you must add it first.
.TP
\fBIUSE\fR
This should be a list of any and all USE flags that are leveraged within your 
build script.  The only USE flags that should not be listed here are arch 
related flags (currently x86 ppc sparc sparc64 alpha).
.TP
\fBDEPEND\fR
This should contain a list of all packages that are required for the
program to compile.
.br
Sometimes programs may depend on different things depending on the USE
variable.  To vary the packages the program depends on, just use this
syntax:
.br
DEPEND="media-libs/libsdl
.br
	jpeg? ( >=media-libs/jpeg-6b )
.br
	tiff? ( >=media-libs/tiff-3.5.5 )
.br
	png? ( >=media-libs/libpng-1.2.1 )
.br
	X? ( virtual/x11 )"
.TP
\fBRDEPEND\fR
This should contain a list of all packages that are required for this program to run (aka runtime depend).  If
this is not set, then it defaults to the value of \fBDEPEND\fR.
.br
You may use the same syntax to vary dependencies as seen above in \fBDEPEND\fR.
.TP
\fBRESTRICT\fR = \fI[nostrip,nomirror,fetch]\fR
This should be a space delimited list of portage features to restrict.
.br
.I nostrip:
final binaries/libraries will not be stripped of debug symbols.
.br
.I nomirror:
files in \fBSRC_URI\fR will not be downloaded from the \fBGENTOO_MIRRORS\fR.
.br
.I fetch:
like \fInomirror\fR but the files will not be fetched via \fBSRC_URI\fR either.
.TP
\fBPROVIDE\fR = \fI"virtual/TARGET"\fR
This variable should only be used when a package provides a virtual target.  For example,
blackdown-jdk and sun-jdk provide \fIvirtual/jdk\fR.  This allows for packages to depend on
\fIvirtual/jdk\fR rather than on blackdown or sun specifically.
.SH "FUNCTIONS"
.TP
\fBpkg_setup\fR
This function can be used if the package needs specific setup actions or checks to be preformed before anything else.
.br
Initial working directory of $PORTAGE_TMPDIR.
.TP
\fBsrc_unpack\fR
This function is used to unpack all the sources in \fIA\fR to \fIWORKDIR\fR.  If not defined in the \fIebuild
script\fR it calls \fIunpack ${A}\fR.  Any patches and other pre configure/compile modifications should be done here.
.br
Initial working directory of $WORKDIR.
.TP
\fBsrc_compile\fR
All necessary steps for configuration and compilation should be done in here.
.br
Initial working directory of $S.
.TP
\fBsrc_install\fR
Should contain everything required to install the package in the temporary \fIinstall directory\fR.
.br
Initial working directory of $S.
.TP
\fBpkg_preinst pkg_postinst\fR
All modifications required on the live\-filesystem before and after the
package is merged should be placed here.  
Also commentary for the user should be listed here as it will be displayed last.
.br
Initial working directory of $PWD.
.TP
\fBpkg_prerm pkg_postrm\fR
Like the pkg_*inst functions but for unmerge.
.br
Initial working directory of $PWD.
.TP
\fBconfig\fR
This function should contain optional basic configuration steps.
.br
Initial working directory of $PWD.
.SH "HELPER FUNCTIONS: GENERAL"
.TP
\fBdie\fR \fI[reason]\fR
Causes the current emerge process to be aborted.  The final display will include \fI[reason]\fR.
.TP
\fBuse\fR \fI[USE item]\fR
If \fI[USE item]\fR is in the USE variable, \fI[USE item]\fR will be echoed and the function will return 1.  If \fI[USE item]\fR is not in the USE variable, the function will return 0.

Common examples:

use jpeg \\
.br
	&& myconf="${myconf} --enable-jpeg" \\
.br
	|| myconf="${myconf} --enabled-jpeg"

if [ `use gnome` ] ; then
.br
	guiconf="--enable-gui=gnome --with-x"
.br
elif [ `use gtk` ] ; then
.br
	guiconf="--enable-gui=gtk --with-x"
.br
elif [ `use X` ] ; then
.br
	guiconf="--enable-gui=athena --with-x"
.br
else
.br
	# No gui version will be built
.br
	guiconf=""
.br
fi
.SH "HELPER FUNCTIONS: UNPACK"
.TP
\fBunpack\fR \fI[list of sources] \fB
This function uncompresses and/or untars a list of sources into the current directory.
.SH "HELPER FUNCTIONS: COMPILE"
.TP
\fBeconf\fR \fI[configure options]\fR
This is used as a replacement for configure.  Performs:
.br
configure \\
.br
	--prefix=/usr \\
.br
	--host=${CHOST} \\
.br
	--mandir=/usr/share/man \\
.br
	--infodir=/usr/share/info \\
.br
	--datadir=/usr/share \\
.br
	--sysconfdir=/etc \\
.br
	--localstatedir=/var/lib \\
.br
	\fI[configure options]\fR

\fB*Note:\fR There is no need to use '|| \fBdie\fR' because \fBeconf\fR checks for you
.TP
\fBemake\fR
This is used as a replacement for make.  Performs 'make ${MAKEOPTS}'
(as set in /etc/make.globals), default is \-j2.
.br
\fB***warning***\fR
.br
if you are going to use \fBemake\fR, make sure your build is happy with paralell makes
(make \-j2).  It should be tested thoroughly as paralell makes are notorious
for failing _sometimes_ but not always.

\fB*Note:\fR Be sure to use '|| \fBdie\fR' constructs to ensure \fBemake\fR success
.SH "HELPER FUNCTIONS: INSTALL"
.TP
\fBeinstall\fR \fI[make options]\fR
This is used as a replacement for make install.  Performs:
.br
make prefix=${D}/usr \\
.br
            mandir=${D}/usr/share/man \\
.br
            infodir=${D}/usr/share/info \\
.br
            datadir=${D}/usr/share \\
.br
            sysconfdir=${D}/etc \\
.br
            localstatedir=${D}/var/lib \\
.br
            \fI[make options]\fR install

\fB*Note:\fR There is no need to use '|| \fBdie\fR' because \fBeinstall\fR checks for you
.TP
.B prepall prepalldocs prepallinfo prepallman prepallstrip
Useful for when a package installs into ${D} via scripts (i.e. makefiles).  If you
want to be sure that libraries are executable, aclocal files are installed into the
right place, doc/info/man files are all compressed, and that executables are all
stripped of debugging symbols, then use these suite of functions.
.RS
.PD 0
.TP
.B prepall:
Runs \fBprepallman\fR, \fBprepallinfo\fR, \fBprepallstrip\fR, sets libraries +x,
and then checks aclocal directories.  Please note this does \fI*not*\fR run
\fBprepalldocs\fR.
.TP
.B prepalldocs:
Compresses all doc files in ${D}/usr/share/doc.
.TP
.B prepallinfo:
Compresses all info files in ${D}/usr/share/info.
.TP
.B prepallman:
Compresses all man files in ${D}/usr/share/man.
.TP
.B prepallstrip:
Strips all executable files of debugging symboles.  This includes libraries.
.RE
.TP
\fBprepinfo preplib preplib.so prepman prepstrip\fR \fI[dir]\fR
Similiar to the \fBprepall\fR functions, these are subtle in their differences.
.RS
.PD 0
.TP
.B prepinfo:
If a \fIdir\fR is not specified, then \fBprepinfo\fR will assume the dir \fIusr\fR.
\fBprepinfo\fR will then compress all the files in ${D}/\fIdir\fR/info.
.TP
.B preplib:
If a \fIdir\fR is not specified, then \fBpreplib\fR will assume the dir \fIusr\fR.
\fBpreplib\fR will then run 'ldconfig -n -N' on ${D}/\fIdir\fR/lib.
.TP
.B preplib.so:
All the files with '.so' in their name and are found in ${D}/\fIdir\fR will be
stripped of their debug symbols.  You may specify multiple directories.
.TP
.B prepman:
If a \fIdir\fR is not specified, then \fBprepman\fR will assume the dir \fIusr\fR.
\fBprepman\fR will then compress all the files in ${D}/\fIdir\fR/man/*/.
.TP
.B prepstrip:
All the files found in ${D}/\fIdir\fR will be stripped.  You may specify multiple directories.
.RE
.TP
\fBdopython\fR \fI[commands]\fR
Performs [commands] with python and returns the result.
.TP
\fBdosed\fR \fI "s:orig:change:g" [filename] \fR
Performs sed (including cp/mv filename) on [filename].
.br
\fB\'dosed "s:/usr/local:/usr:g" /usr/bin/some-script'\fR
runs sed on ${D}/usr/bin/some-script
.TP
\fBdodir\fR \fI[path]\fR
Creates a directory inside of ${D}.
.br
.BR 'dodir\ /usr/lib/apache'
creates ${D}/usr/lib/apache
.TP
\fBinto\fR \fI[path]\fR
Sets the root (\fIDESTTREE\fR) for other functions like dobin, dosbin, doman, doinfo, dolib.
.br
The default root is /usr.
.TP
\fBdobin\fR \fI[list of binaries]\fR
Installs a binary or a list of binaries into \fIDESTTREE\fR/bin.  Creates all necessary dirs.
.TP
\fBdosbin\fR \fI[list of binaries]\fR
Installs a binary or a list of binaries into \fIDESTTREE\fR/sbin.  Creates all necessary dirs.
.TP
\fBdolib dolib.a dolib.so\fR \fI[list of libraries]\fR
Installs a library or a list of libraries into \fIDESTTREE\fR/lib.
Creates all necessary dirs.
.TP
\fBdoman\fR \fI[list of man\-pages]\fR
Installs manual\-pages into \fIDESTDIR\fR/man/man[1\-8n] depending on the manual file ending.  
The files are gzipped if they are not already.  Creates all necessary dirs.  
.TP
\fBdohard dosym\fR \fI[filename] [linkname] \fR
Performs the ln command as either a hard link or symlink.
.TP
\fBdohtml\fR \fI [\-a filetypes] [\-r] [\-x list\-of\-dirs\-to\-ignore] [list\-of\-files\-and\-dirs]\fR
Installs the files in the list of files (space\-separated list) into /usr/share/doc/${PF}/html provided the file
ends in .html, .png, .js, .jpg or .css.  Setting \-a limits what types of files will be included, \-A appends to the default list, setting \-x sets which dirs to exclude (CVS excluded by default), \-r sets recursive.
.TP
\fBdoinfo\fR \fI[list of info\-files] \fR
Installs info\-pages into \fIDESTDIR\fR/info.  Files are automatically gzipped.  Creates all necessary dirs.
.TP
\fBdojar\fR \fl[list\-of\-files] \fR
Installs jar files into /usr/share/${PN}/lib and adds them to /usr/share/${PN}/classpath.env.
.TP
\fBdomo\fR \fI[list of locale\-files] \fR
Installs locale\-files into \fIDESTDIR\fR/usr/share/locale/[LANG] depending on local\-file's ending.  Creates all
necessary dirs.
.TP
\fBfowners fperms\fR \fI[permissions] [files]\fR
Performs chown (fowners) or chmod (fperms), applying [permissions] to [files].
.TP
\fBinsinto\fR \fI[path]\fR
Sets the root (\fINSDESTTREE\fR) for the doins function.
.br
The default root is /.
.TP
\fBinsopts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in doins.  The default is \fI\-m0644\fR.
.TP
\fBdoins\fR \fI[list of files]\fR
Installs files into \fIINSDESTTREE\fR.  This function uses \fBinstall\fR(1).
.TP
\fBexeinto\fR \fI[path}\fR
Sets the root (\fIEXEDESTTREE\fR) for the doexe function.
.br
The default root is /.
.TP
\fBexeopts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in doexe. The
default is \fI\-m0755\fR.
.TP
\fBdoexe\fR \fI[list of executables]\fR
Installs a executable or a list of executable into \fIEXEDESTTREE\fR.
This function uses install(1).
.TP
\fBdocinto\fR \fI[path}\fR
Sets the relative subdir (\fIDOCDESTTREE\fR) used by dodoc.
.TP
\fBdodoc\fR \fI[list of document]\fR
Installs a document or a list of document into /usr/doc/${PV}/\fIDOCDESTTREE\fR.
Files are automatically gzipped.  Creates all necessary dirs.
.TP
\fBnewbin newsbin newlib newlib.so newlib.a newman newinfo newins newexe newdoc\fR \fI[file] [new filename]\fR
All these functions act like the do* functions, but they only work with one
file and the file is installed as \fI[new filename]\fR.
.SH "REPORTING BUGS"
Please report bugs via http://bugs.gentoo.org/
.SH "SEE ALSO"
.BR ebuild (1),
.BR make.conf (5)
.TP
The \fI/usr/sbin/ebuild.sh\fR script.
.TP
The helper apps in \fI/usr/lib/portage/bin\fR.
.SH "FILES"
.TP
\fB/etc/make.conf\fR 
Contains variables for the build\-process and overwrites those in make.defaults.
.TP
\fB/etc/make.globals\fR
Contains the default variables for the build\-process, you should edit \fI/etc/make.conf\fR instead.
.SH "AUTHORS"
Achim Gottinger <achim@gentoo.org>
.br
Mark Guertin <gerk@gentoo.org>
.br 
Nicholas Jones <carpaski@gentoo.org>
.br
Mike Frysinger <vapier@gentoo.org>
